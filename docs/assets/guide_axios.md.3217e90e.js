import{o as n,c as s,b as a}from"./app.6008987c.js";const p='{"title":"axios 封装","description":"","frontmatter":{},"headers":[{"level":2,"title":"本人精简封装的 axios.js","slug":"本人精简封装的-axios-js"},{"level":2,"title":"大神封装 axiosTool.js,留存参考","slug":"大神封装-axiostool-js-留存参考"},{"level":3,"title":"main.js 中引入该文件","slug":"main-js-中引入该文件"},{"level":3,"title":"组件中直接使用即可","slug":"组件中直接使用即可"}],"relativePath":"guide/axios.md","lastUpdated":1621961748922}',t={},o=a('<h1 id="axios-封装"><a class="header-anchor" href="#axios-封装" aria-hidden="true">#</a> axios 封装</h1><h2 id="本人精简封装的-axios-js"><a class="header-anchor" href="#本人精简封装的-axios-js" aria-hidden="true">#</a> 本人精简封装的 axios.js</h2><div class="language-js"><pre><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">import</span> cheerio <span class="token keyword">from</span> <span class="token string">&#39;cheerio&#39;</span>\nAxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;text/plain; charset=utf-8&#39;</span>\n<span class="token keyword">const</span> isEnv <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isMob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(iPhone|iPod|Android|ios|iPad)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> req <span class="token operator">=</span> Axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  timeout<span class="token operator">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>\n  headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain;application/x-www-form-urlencoded;charset=UTF-8&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  withCredentials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  credientials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  emulateJSON<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nreq<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> config\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nreq<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token string">&#39;https://bird.ioliu.cn/v1/?url=&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> _storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage\n<span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_storage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> _storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span>\n        Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">?</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>_storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>\n        _storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span>\n        data\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_storage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_storage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>\n  proxy<span class="token punctuation">,</span>\n  isMob<span class="token punctuation">,</span>\n  isEnv<span class="token punctuation">,</span>\n  req<span class="token punctuation">,</span>\n  storage<span class="token punctuation">,</span>\n  cheerio\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="大神封装-axiostool-js-留存参考"><a class="header-anchor" href="#大神封装-axiostool-js-留存参考" aria-hidden="true">#</a> 大神封装 axiosTool.js,留存参考</h2><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token comment">//取消请求</span>\n<span class="token keyword">let</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken\n<span class="token comment">//设置默认请求头，如果不需要可以取消这一步</span>\naxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;X-Requested-With&#39;</span><span class="token operator">:</span> <span class="token string">&#39;XMLHttpRequest&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 请求超时的时间限制</span>\naxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">20000</span>\n<span class="token comment">// 开始设置请求 发起的拦截处理</span>\n<span class="token comment">// config 代表发起请求的参数的实体</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 得到参数中的 requestName 字段，用于决定下次发起请求，取消对应的 相同字段的请求</span>\n    <span class="token comment">// 如果没有 requestName 就默认添加一个 不同的时间戳</span>\n    <span class="token keyword">let</span> requestName\n    <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>requestName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            requestName <span class="token operator">=</span> config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>requestName\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            requestName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>params<span class="token punctuation">.</span>requestName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            requestName <span class="token operator">=</span> config<span class="token punctuation">.</span>params<span class="token punctuation">.</span>requestName\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            requestName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 判断，如果这里拿到的参数中的 requestName 在上一次请求中已经存在，就取消上一次的请求</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">[</span>requestName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> axios<span class="token punctuation">[</span>requestName<span class="token punctuation">]</span><span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            axios<span class="token punctuation">[</span>requestName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            axios<span class="token punctuation">[</span>requestName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n            axios<span class="token punctuation">[</span>requestName<span class="token punctuation">]</span><span class="token punctuation">.</span>cancel <span class="token operator">=</span> c\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> config\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 请求到结果的拦截处理</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 返回请求正确的结果</span>\n    <span class="token keyword">return</span> config\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 错误的请求结果处理，这里的代码根据后台的状态码来决定错误的输出信息</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;错误请求&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;未授权，请重新登录&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;拒绝访问&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;请求错误,未找到该资源&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">405</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;请求方法未允许&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">408</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;请求超时&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;服务器端出错&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">501</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;网络未实现&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">502</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;网络错误&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">503</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;服务不可用&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">504</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;网络超时&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">case</span> <span class="token number">505</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;http版本不支持该请求&#39;</span>\n                <span class="token keyword">break</span>\n            <span class="token keyword">default</span><span class="token operator">:</span>\n                error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">连接错误</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&quot;连接到服务器失败&quot;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 将axios 的 post 方法，绑定到 vue 实例上面的 $post</span>\n<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$post</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将axios 的 get 方法，绑定到 vue 实例上面的 $get</span>\n<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            params<span class="token operator">:</span> params\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 返回请求成功的数据 data</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 请求示例</span>\n<span class="token comment">// requestName 为多余的参数 作为请求的标识，下次发起相同的请求，就会自动取消上一次还没有结束的请求</span>\n<span class="token comment">// 比如正常的请求参数只有一个 name: &#39;123&#39;，但是这里我们需要额外再加上一个 requestName</span>\n<span class="token comment">/**\n    this.$post(url, { name: &#39;123&#39;, requestName: &#39;post_1&#39; })\n        .then(res =&gt; {\n            console.log(`请求成功：${res}`)\n        })\n */</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> axios\n</code></pre></div><h3 id="main-js-中引入该文件"><a class="header-anchor" href="#main-js-中引入该文件" aria-hidden="true">#</a> main.js 中引入该文件</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> axios <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./static/js/axiosTool&#39;</span>\n</code></pre></div><h3 id="组件中直接使用即可"><a class="header-anchor" href="#组件中直接使用即可" aria-hidden="true">#</a> 组件中直接使用即可</h3><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$post</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url2<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;王&quot;</span><span class="token punctuation">,</span>\n    docType<span class="token operator">:</span> <span class="token string">&quot;pson&quot;</span><span class="token punctuation">,</span>\n    requestName<span class="token operator">:</span> <span class="token string">&#39;name02&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;李&quot;</span><span class="token punctuation">,</span>\n    requestName<span class="token operator">:</span> <span class="token string">&#39;name01&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',9);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
